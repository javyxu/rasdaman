/*
 * This file is part of rasdaman community.
 *
 * Rasdaman community is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Rasdaman community is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU  General Public License for more details.
 *
 * You should have received a copy of the GNU  General Public License
 * along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2003 - 2017 Peter Baumann / rasdaman GmbH.
 *
 * For more information please see <http://www.rasdaman.org>
 * or contact Peter Baumann via <baumann@rasdaman.com>.
 */
package petascope.wcps.exception.syntax;

import java.util.List;

/**
 * General exception class from which all managed errors should inherit.
 *
 * @author <a href="mailto:alex@flanche.net">Alex Dumitru</a>
 * @author <a href="mailto:vlad@flanche.net">Vlad Merticariu</a>
 */
public abstract class WCPSSyntaxError {

    /**
     * Constructor for the class
     */
    public WCPSSyntaxError() {
    }

    /**
     * Initializes the error with the needed information for generating the error message.
     *
     * @param stack              a stack of the already parsed clauses
     * @param offendingSymbol    the offending symbol where parsing was stopped
     * @param line               the line on which the error occurred
     * @param charPositionInLine the position in line where the error occurred
     * @param message            the message generated by the parser
     */
    public void initialize(List<String> stack, Object offendingSymbol, int line, int charPositionInLine, String message) {
        this.stack = stack;
        this.offendingSymbol = offendingSymbol;
        this.line = line;
        this.charPositionInLine = charPositionInLine;
        this.message = message;
    }

    /**
     * Decides if this error is suitable for the parser generated error.
     *
     * @return true if so, false otherwise.
     */
    public abstract boolean canHandle();

    /**
     * Returns an error message based on the given parser error parameters
     *
     * @return the generated error message
     */
    public abstract String getErrorMessage();

    protected List<String> stack;
    protected Object offendingSymbol;
    protected int line;
    protected int charPositionInLine;
    protected String message;

}
