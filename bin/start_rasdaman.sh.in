#!/bin/bash
#
# This file is part of rasdaman community.
#
# Rasdaman community is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Rasdaman community is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2003 - 2017 Peter Baumann /
# rasdaman GmbH.
#
# For more information please see <http://www.rasdaman.org>
# or contact Peter Baumann via <baumann@rasdaman.com>.      
#

#
# start_rasdaman.sh - start rasdaman server complex
#
# SYNTAX
#    start_rasdaman.sh [servers...]
#
# DESCRIPTION
#    This script starts rasdaman.
#    Which rasdaman servers are started depends on the 'server' name(s) provided:
#    * If no server name is provided then the environment variable $RASSERVERS is
#      inspected to obtain a list of servers to be started. If $RASSERVERS is not
#      set, then all rasdaman servers defined will be attempted to start.
#    * If at least one parameter is provided then all parameters
#      will be treated as a server name which is tried to be started.
#
#    To log in to the server, the external variable $RASLOGIN is expected to hold
#    an ID string (see rasdaman manual). If not found, a desperate last attempt is
#    made to login as rasadmin/rasadmin. If this fails, no servers are started at all.
#
# PRECONDITIONS
#    - need to have a rasdaman admin login either from $RASLOGIN or as rasadmin/rasadmin
#    - need to run with an effective user id that allows to write into log/
#    - need to have a valid rasdaman installation
#

# get script name
PROG=`basename $0`

# RETURN CODES
RC_OK=0        # everything went fine
RC_ERROR=1    # something went wrong

# --- CONSTANTS -----------------------------------------------------

RASMGR_PORT=7001
# rasadmin/rasadmin
DEFAULT_RASCONTROL_LOGIN=rasadmin:d293a15562d3e70b6fdc5ee452eaed40

# error messages:
ERROR_PARAM="ERS001 Error: illegal parameter: $1"

# base DBMS used by petascope
PETASCOPEDB=@petascopedb@

log()
{
  echo "$PROG: $*"
}

logn()
{
  echo -n "$PROG: $*"
}

# give rasserver processes time to disappear (10 second timeout)
wait_for_rasservers_to_shutdown()
{
count=0
while [ $count -lt 100 ]; do
    pgrep -f @bindir@rasserver > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        break # no rasservers found, no need to wait more
    fi
    count=$(($count+1))
    # otherwise, wait 0.1 seconds and try again
    # if sleep 0.1 fails (0.1 not supported), try sleep 1
    sleep 0.1 || sleep 1
done
if [ $count -eq 100 ]; then
    echo
    log "timeout of 10 seconds on waiting for rasserver processes to shutdown reached;"
    log "please manually check and kill any still running rasserver processes:"
    log " 1. list the running rasserver processes: pgrep -f @bindir@rasserver"
    log " 2. kill each process with: kill <pid> (or kill -9 <pid> if kill fails)"
fi
}

# Check if the last executed command is successfull
# $1 - process name
# $2 == 1 - exit with error if failed to start
# return - pid if started successfully
check_process()
{
    # get exit code and pid of the last executed command
    local exit_code=$?
    pid=$!
    # wait 1 second for the process to establish
    sleep 1
    if [ $exit_code -ne 0 ]; then
        echo "failed; please check the logs for more information."
        [ "$2" == "1" ] && exit $RC_ERROR
    elif ! ps -p $pid > /dev/null 2>&1; then
        echo "failed, pid $pid not found; please check the logs for more information."
        [ "$2" == "1" ] && exit $RC_ERROR
    else
        echo "ok, pid $pid."
        echo $pid > $1.pid
    fi
}

# Read the property of a value by input key from input properties file
get_property_value() {
    # $1 is path to input properties file (e.g: /opt/rasdaman/etc/petascope.properties).
    # $2 is the key of a property in this file which needs to get the value of this key.
    local -r properties_file="$1"
    local -r key="$2"

    # only grep key=value line not commented line (e.g: #key=value)
    grep "^$key=" "$properties_file" | sed -e 's/.*=//' -e 's/^[ \t]*//'
} 

log "starting rasdaman server complex..."

# --- start rasmgr: -------------------------------------------------

# check if rasmgr exists
if [ ! -f @bindir@rasmgr ];
then
    log "rasmgr does not exist in "@bindir@", rasdaman cannot be started."
    exit $RC_ERROR
fi

# here we want to put all log files
cd @logdir@

# check if we can actually write anything here
if [ ! -w . ]
then
    log "User $USER has no write permissions in @logdir@, rasdaman cannot be started." >&2
    exit $RC_ERROR
fi

# determine rascontrol login
if [ -z "$RASLOGIN" ]; then
    export RASLOGIN=$DEFAULT_RASCONTROL_LOGIN
fi

# clear previous log file
rm -f nohup.out

# start rasdaman server manager as demon; log will go into nohup.out
# the manager is started in quiet mode
logn "  starting rasmgr... "
nohup @bindir@rasmgr --port $RASMGR_PORT > nohup.out 2>&1 &
check_process "rasmgr" 1

# --- start servers: -------------------------------------------------


# these servers will be started:
if [ -n "$1" ]; then
    # parameters provided, take them as server names
    SERVERS="$@"
else
    SERVERS="$RASSERVERS"
fi

# ...then spawn server workers
if [ -n "$SERVERS" ]; then
    for SRV in $SERVERS; do
        logn "  starting server $SRV... "
        @bindir@rascontrol --port $RASMGR_PORT -e -q -x up srv $SRV || exit $!
        echo "ok."
    done
else
    logn "  starting all rasdaman servers... "
    @bindir@rascontrol --port $RASMGR_PORT -e -q -x up srv -all || exit $!
    echo "ok."
fi

#------start embedded petascope/secore if needed--------------------------
log_path="@logdir@"
# war files also copied to this share folder: /opt/rasdaman/share/rasdaman/war/
war_path="@pkgdatadir@/war"
petascope_properties_path="@sysconfdir@/petascope.properties"
secore_properties_path="@sysconfdir@/secore.properties"

start_embedded() {
    # Start embedded tomcat from values in properties file
    # $1: the path to properties file (e.g: /opt/rasdaman/etc/petascope.properties).
    # $2: the web application name (e.g: petascope, secore).
    # $3: the war file of application (e.g: rasdaman.war, def.war).
    local -r properties_file_path="$1"
    local -r application_name="$2"
    local -r war_file_name="$3"  

    if [ -f "$properties_file_path" ]; then
        # check if java-server is embedded/external
        java_server=$(get_property_value "$properties_file_path" "java_server")
        # check if java-server is embedded
        if [ "$java_server" == "embedded" ]; then
            # Get the embedded port for server
            server_port=$(get_property_value "$properties_file_path" "server.port")
            log "  starting $application_name on port $server_port... "
            # Check if port is available
            fuser -s -n tcp "$server_port"   
             # Return 1 means port is available  
            if [[ ! $? -eq 0 ]]; then
                nohup java -jar "$war_path/""$war_file_name" >> "$application_name.log" & 2>&1
                check_process "$application_name"
            else
                echo "failed, port '$server_port' is occupied."
            fi
        fi
    else
        log "Warning: '$properties_file_path' not found, $application_name cannot be started."
    fi
}

# Check if it should start embedded tomcat, secore
start_embedded "$secore_properties_path" "secore" "def.war"
start_embedded "$petascope_properties_path" "petascope" "rasdaman.war"

log "done."
exit $RC_OK

# --- END ACTION ----------------------------------------------------

