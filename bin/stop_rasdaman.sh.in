#!/bin/bash
#
# This file is part of rasdaman community.
#
# Rasdaman community is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Rasdaman community is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015 Peter Baumann /
# rasdaman GmbH.
#
# For more information please see <http://www.rasdaman.org>
# or contact Peter Baumann via <baumann@rasdaman.com>.      
#
#
# stop_rasdaman.sh - shut down rasdaman server complex
#
# SYNTAX
#       stop_rasdaman.sh
#
# DESCRIPTION
#    This script terminates rasdaman.
#    First, all server processes are terminated. Then, the server
#    manager (rasmgr) is shut down.
#    To log in to the server, the external variable $RASLOGIN is expected to hold
#    an ID string (see rasdaman manual). If not found, a desperate last attempt is
#    made to login as rasadmin/rasadmin. If this fails, no servers are stopped at all.
#
# BE CAREFUL
#    By terminating rasdaman, all open transactions are aborted,
#    and their contents will be irretrievably lost!
#
# PRECONDITIONS
#    - need to have a rasdaman admin login either from $RASLOGIN or as rasadmin/rasadmin
#    - no open transactions or databases, they will be killed and transactions aborted
#

# --- CONSTANTS -----------------------------------------------------

PROG=`basename $0`

# RETURN CODES
RC_OK=0        # everything went fine
RC_ERROR=1    # something went wrong

RASMGR_PORT=7001
# rasadmin/rasadmin
DEFAULT_RASCONTROL_LOGIN=rasadmin:d293a15562d3e70b6fdc5ee452eaed40

# base DBMS used by petascope
PETASCOPEDB=@petascopedb@

log()
{
  echo "$PROG: $*"
}

logn()
{
  echo -n "$PROG: $*"
}

# Read the property of a value by input key from input properties file
get_property_value() {
    # $1 is path to input properties file (e.g: /opt/rasdaman/etc/petascope.properties).
    # $2 is the key of a property in this file which needs to get the value of this key.
    local -r properties_file="$1"
    local -r key="$2"

    # only grep key=value line not commented line (e.g: #key=value)
    grep "^$key=" "$properties_file" | sed -e 's/.*=//' -e 's/^[ \t]*//'
}

# --- kill embedded petascope, secore if they are running ---------

stop_embedded() {
    # Stop embedded tomcat from values in properties file
    # $1: the path to properties file (e.g: /opt/rasdaman/etc/petascope.properties).
    # $2: the web application name (e.g: petascope, secore).
    local -r properties_file_path="$1"
    local -r application_name="$2"

    if [ -f "$properties_file_path" ]; then
        # check if java-server is embedded/external
        java_server=$(get_property_value "$properties_file_path" "java_server")
        # check if java-server is embedded
        if [ "$java_server" == "embedded" ]; then
            # Check if the port for this application is running and kill this process
            # Get the embedded port for server
            server_port=$(get_property_value "$properties_file_path" "server.port")
            # Check if port is available
            fuser -s -n tcp "$server_port" 
            # Return 0 means port is occupied and embedded server is running.
            if [[ $? -eq 0 ]]; then
                # kill process on this port
                kill -9 $(lsof -t -i:"$server_port" -sTCP:LISTEN)
                log "embedded $application_name is terminated on port '$server_port'."
            fi
        fi
    else
        log "could not find properties file '$properties_file_path' to stop embedded $application_name."
        exit $RC_ERROR
    fi
}

petascope_properties_path="@sysconfdir@/petascope.properties"
secore_properties_path="@sysconfdir@/secore.properties"

# Check if it should stop embedded tomcat, secore
stop_embedded "$secore_properties_path" "secore"
stop_embedded "$petascope_properties_path" "petascope"

# give rasserver processes time to disappear (10 second timeout)
wait_for_rasservers_to_shutdown()
{
count=0
while [ $count -lt 100 ]; do
    pgrep -f @bindir@rasserver > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        break # no rasservers found, no need to wait more
    fi
    count=$(($count+1))
    # otherwise, wait 0.1 seconds and try again
    # if sleep 0.1 fails (0.1 not supported), try sleep 1
    sleep 0.1 || sleep 1
done
if [ $count -eq 100 ]; then
    log "timeout of 10 seconds on waiting for rasserver processes to shutdown reached;"
    log "please manually check and kill any still running rasserver processes:"
    log " 1. list the running rasserver processes: pgrep -f @bindir@rasserver"
    log " 2. kill each process with: kill <pid> (or kill -9 <pid> if kill fails)"
fi
}

# check if this particular rasmgr is running first of all
pgrep -f @bindir@rasmgr > /dev/null 2>&1
if [ $? -ne 0 ]; then
    log "rasdaman is already down, nothing to do."
    exit $RC_OK
fi

log "terminating rasdaman server complex... "

# --- stop rasdaman servers ---------------------------------------

if [ -z "$RASLOGIN" ]; then
    export RASLOGIN=$DEFAULT_RASCONTROL_LOGIN
fi

# determine a list of all currently running servers
ALLSERVERS=`@bindir@rascontrol --port $RASMGR_PORT -e -q -x list srv -all | awk '{ if (\$6 == "UP") print \$2;}'`

# ...and shut down all of them, forcefully (!); any open transaction will be lost
for SRV in $ALLSERVERS; do
    logn "  terminating server $SRV... "
    @bindir@rascontrol --port $RASMGR_PORT -e -q -x down srv $SRV -kill
    if [ $? -eq 0 ]; then
        echo "ok."
    else
        echo "failed."
    fi
done

wait_for_rasservers_to_shutdown

# --- stop rasmgr -------------------------------------------------

# finally shut down the server manager
logn ""
@bindir@rascontrol --port $RASMGR_PORT -e -q -x down host -all

log "done."

exit $RC_OK

