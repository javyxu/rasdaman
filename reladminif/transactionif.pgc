/*
* This file is part of rasdaman community.
*
* Rasdaman community is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Rasdaman community is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
*
* Copyright 2003, 2004, 2005, 2006, 2007, 2008, 2009 Peter Baumann /
rasdaman GmbH.
*
* For more information please see <http://www.rasdaman.org>
* or contact Peter Baumann via <baumann@rasdaman.com>.
*/
/*************************************************************************
 *
 *
 * PURPOSE:
 *   Code with embedded SQL for relational DBMS
 *
 *
 * COMMENTS:
 * - reconsider this 604 ignorance!
 *
 ***********************************************************************/

static const char rcsid[] = "@(#)reladminif,TransactionIf: $Id: transactionif.ec,v 1.6 2003/12/27 23:11:43 rasdev Exp $";

#include "config.h"
#include "debug.hh"

// general embedded SQL related definitions
EXEC SQL include sqlglobals.h;

#include "transactionif.hh"
#include "adminif.hh"
#include "oidif.hh"
#include "catalogmgr/typefactory.hh"
#include "sqlerror.hh"
#include "objectbroker.hh"
#include "databaseif.hh"
#include "dbobject.hh"
#include <logging.hh>

// PG stuff for libpg connection maintenance
#include "libpq-fe.h"
extern PGconn *pgConn;


void
TransactionIf::begin( bool readOnly )
{
    isReadOnly = readOnly;
    AdminIf::setAborted(false);
    AdminIf::setReadOnlyTA(readOnly);

    LDEBUG << "EXEC SQL BEGIN WORK";
    EXEC SQL BEGIN WORK;
    if (sqlca.sqlwarn[2] == 'W')    // real error, not just a warning
    {
        SQLCODE = 0;        // FIXME: bad hack, as PG can't reset error state and SQLCODE is queried in many places -- PB 2005-jan-09
    }
    else
    {
        LTRACE << "error occured while issuing BEGIN";
        generateException();
    }

    if (readOnly)
    {
        LDEBUG << "EXEC SQL SET TRANSACTION READ ONLY";
        EXEC SQL SET TRANSACTION READ ONLY;
        // no error check, as this doesn't inhibit work
    }

    // prelim.:have additional libpq TA -- PB 2005-jan-09
    LDEBUG << "PQexec( pgConn, BEGIN )";
    PGresult *pgResult = PQexec( pgConn, "BEGIN" );
    if (PQresultStatus(pgResult) != PGRES_COMMAND_OK)
    {
        PQclear(pgResult);
        generateException();
    }
    PQclear(pgResult);

#ifdef RMANBENCHMARK
    DBObject::readTimer.start();
    DBObject::readTimer.pause();

    DBObject::updateTimer.start();
    DBObject::updateTimer.pause();

    DBObject::deleteTimer.start();
    DBObject::deleteTimer.pause();

    DBObject::insertTimer.start();
    DBObject::insertTimer.pause();

    OId::oidAlloc.start();
    OId::oidAlloc.pause();

    OId::oidResolve.start();
    OId::oidResolve.pause();
#endif

    OId::initialize();
    TypeFactory::initialize();
}

void
TransactionIf::commit()
{
    if (isReadOnly)
    {
        LTRACE << "read only: aborting";
        LDEBUG << "TA is readonly: aborting";
        abort();
    }
    else
    {
        AdminIf::setAborted(false);
        LTRACE << "set aborted false";
        TypeFactory::freeTempTypes();
        LTRACE << "freed temp types";
        ObjectBroker::clearBroker();
        LTRACE << "cleared broker";
        OId::deinitialize();
        LTRACE << "wrote oid counters";
        AdminIf::setReadOnlyTA(false);
        LTRACE << "committing";

        // prelim.:have additional libpq TA -- PB 2005-jan-09
        LDEBUG << "PQexec( pgConn, END )";
        PGresult *pgResult = PQexec( pgConn, "END" );
        if (PQresultStatus(pgResult) != PGRES_COMMAND_OK)
        {
            PQclear(pgResult);
            generateException();
        }
        PQclear(pgResult);

        LDEBUG << "EXEC SQL COMMIT WORK";
        EXEC SQL COMMIT WORK;
        if (SQLCODE == -604)    // = "no TA open" - seems to be a hickup from our double transaction
            // so we ignore it; FIXME: reinvestigate! -- PB 25-aug-2005
        {
            LDEBUG << "TransactionIf::commit(): ignoring 'no TA open' error (SQLCODE -604) during COMMIT.";
        }
        else if (check("TransactionIf::begin() COMMIT\0"))
        {
            LTRACE << "error occured while issuing COMMIT";
            generateException();
        }
        if (lastBase)
        {
            LTRACE << "closing dbms";
            lastBase->baseDBMSClose();
        }
    }

#ifdef RMANBENCHMARK
    DBObject::readTimer.stop();

    DBObject::updateTimer.stop();

    DBObject::deleteTimer.stop();

    DBObject::insertTimer.stop();

    OId::oidAlloc.stop();

    OId::oidResolve.stop();
#endif
}

void
TransactionIf::abort()
{
    // prelim.:have additional libpq TA -- PB 2005-jan-09
    LDEBUG << "PQexec( pgConn, ABORT )";
    PGresult *pgResult = PQexec( pgConn, "ABORT" );
    if (PQresultStatus(pgResult) != PGRES_COMMAND_OK)
    {
        PQclear(pgResult);
        generateException();
    }
    PQclear(pgResult);

    AdminIf::setAborted(true);
    TypeFactory::freeTempTypes();
    ObjectBroker::clearBroker();
    OId::deinitialize();
    AdminIf::setReadOnlyTA(false);

    LDEBUG << "EXEC SQL ROLLBACK WORK";
    EXEC SQL ROLLBACK WORK;
    if (check("TransactionIf::abort() ROLLBACK\0"))
    {
        LTRACE << "error occured while issuing ROLLBACK";
        LDEBUG << "TransactionIf::abort(): error during ROLLBACK, still continuing: " << SQLCODE;
    }
    if(lastBase)
        lastBase->baseDBMSClose();

#ifdef RMANBENCHMARK
    DBObject::readTimer.stop();

    DBObject::updateTimer.stop();

    DBObject::deleteTimer.stop();

    DBObject::insertTimer.stop();

    OId::oidAlloc.stop();

    OId::oidResolve.stop();
#endif
}

