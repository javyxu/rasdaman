/*
* This file is part of rasdaman community.
*
* Rasdaman community is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Rasdaman community is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
*
* Copyright 2003, 2004, 2005, 2006, 2007, 2008, 2009 Peter Baumann /
rasdaman GmbH.
*
* For more information please see <http://www.rasdaman.org>
* or contact Peter Baumann via <baumann@rasdaman.com>.
*/
// This is -*- C++ -*-
/*****************************************************************************
 *
 *
 * PURPOSE:
 *
 *
 * COMMENTS:
 *   uses embedded SQL
 *
 *****************************************************************************/

static const char rcsid[] = "@(#)reladminif,OIdIf: $Id: oidif.ec,v 1.5 2003/12/27 23:11:43 rasdev Exp $";

#include "config.h"
#include "debug-srv.hh"

// general embedded SQL related definitions
EXEC SQL include "sqlglobals.h";

#include "oidif.hh"
#include "sqlerror.hh"
#include "adminif.hh"
#include <logging.hh>

void
OId::initialize()
{
    loadedOk = false;

    EXEC SQL BEGIN DECLARE SECTION;
        long    nextoid;
        char name[STRING_MAXLEN];
    EXEC SQL END DECLARE SECTION;
    nextoid = 0;
    for (unsigned int i = 1; i < maxCounter; i++)
    {
        (void) strncpy( name, const_cast<char*>(counterNames[i]), sizeof(name) );

        LDEBUG << "EXEC SQL SELECT NextValue INTO :nextoid FROM RAS_COUNTERS WHERE CounterName = " << name;
        EXEC SQL SELECT NextValue INTO :nextoid
        FROM RAS_COUNTERS
        WHERE CounterName = :name;
        LDEBUG << "-> nextoid=" << nextoid;
        if (check("OId::initialize() SELECT OId"))
        {
            LERROR << "OId::initialize() error reading " << name;
            generateException();
        }
        *counterIds[i] = nextoid;
        LTRACE << "read " << counterNames[i] << " " << *counterIds[i];
    }

    loadedOk = true;
}

void
OId::deinitialize()
{
    if (AdminIf::isReadOnlyTA())
    {
        LTRACE << "do nothing is read only";
    }
    else
    {
        if (AdminIf::isAborted())
        {
            LTRACE << "do nothing is aborted";
        }

        else if(loadedOk==false)
        {
            LTRACE << "avoiding to write uninitialized counters into DB";
        }

        else
        {
            EXEC SQL BEGIN DECLARE SECTION;
                long    nextoid1;
                char    name2[STRING_MAXLEN];
            EXEC SQL END DECLARE SECTION;

            for (unsigned int i = 1; i < maxCounter; i++)
            {
                nextoid1 = *counterIds[i];
                (void) strncpy( name2, const_cast<char*>(counterNames[i]), sizeof(name2) );

                LTRACE << "setting " << name2 << " to " << nextoid1;
                LDEBUG << "EXEC SQL UPDATE RAS_COUNTERS SET NextValue = " << nextoid1 << " WHERE CounterName = " << name2;
                EXEC SQL UPDATE RAS_COUNTERS SET NextValue = :nextoid1
                WHERE CounterName = :name2;
                if (check("OId::deinitialize() UPDATE OId"))
                {
                    LERROR << "OId::deinitialize() error writing " << name2;
                }
            }
        }
    }

    loadedOk = false;
}

