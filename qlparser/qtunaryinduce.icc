/*
* This file is part of rasdaman community.
*
* Rasdaman community is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Rasdaman community is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
*
* Copyright 2003, 2004, 2005, 2006, 2007, 2008, 2009 Peter Baumann /
rasdaman GmbH.
*
* For more information please see <http://www.rasdaman.org>
* or contact Peter Baumann via <baumann@rasdaman.com>.
*/
/*************************************************************
 *
 *
 * COMMENTS:
 *
 ************************************************************/

#include <logging.hh>

inline QtNode::QtNodeType
QtNot::getNodeType() const
{
  return nodeType;
}



inline QtNode::QtNodeType
QtIsNull::getNodeType() const
{
  return nodeType;
}




inline QtNode::QtNodeType
QtDot::getNodeType() const
{
  return nodeType;
}


//---- QtCast ----

inline QtNode::QtNodeType QtCast::getNodeType() const {
   	return nodeType;
}
 
inline Ops::OpType QtCast::getOp(QtCast::cast_types t) {
     Ops::OpType c=Ops::OP_CAST_BOOL;
     switch(t) {
	 case QtCast::t_bool: c=Ops::OP_CAST_BOOL; break;
         case QtCast::t_octet: c=Ops::OP_CAST_OCTET; break;
         case QtCast::t_char: c=Ops::OP_CAST_CHAR; break;
         case QtCast::t_short: c=Ops::OP_CAST_SHORT; break;
         case QtCast::t_ushort: c=Ops::OP_CAST_USHORT; break;
         case QtCast::t_long: c=Ops::OP_CAST_LONG; break;
         case QtCast::t_ulong: c=Ops::OP_CAST_ULONG; break;
         case QtCast::t_float: c=Ops::OP_CAST_FLOAT; break;
         case QtCast::t_double: c=Ops::OP_CAST_DOUBLE; break;
         default: LERROR << "Error: QtCast::getOp - undefined cast type."; break;
     }
     return c;
}

                                                                                 
//---- QtRealPartOp ----

inline QtNode::QtNodeType QtRealPartOp::getNodeType() const {
	return nodeType; 
}

//---- QtImaginarPartOp ----

inline QtNode::QtNodeType QtImaginarPartOp::getNodeType() const {
	return nodeType; 
}

 
//---------------- 

