/*
* This file is part of rasdaman community.
*
* Rasdaman community is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Rasdaman community is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
*
* Copyright 2003, 2004, 2005, 2006, 2007, 2008, 2009 Peter Baumann /
rasdaman GmbH.
*
* For more information please see <http://www.rasdaman.org>
* or contact Peter Baumann via <baumann@rasdaman.com>.
*/
/*************************************************************
 *
 *
 * COMMENTS:
 *
 ************************************************************/

#include <cstdlib>
#include <cstring>
#include <logging.hh>

inline QtNode*
QtNode::getParent() const
{
    return parent;
}


inline void
QtNode::setParent( QtNode* node )
{
    parent = node;
}


inline QtNode::QtNodeType
QtNode::getNodeType() const
{
    return nodeType;
}



inline void
QtNode::setInput( QtOperation* , QtOperation* )
{
    LERROR << "Error: Method setInput(...) is undefined for node type " << static_cast<int>(getNodeType()) << " in the query tree.";
}


inline const ParseInfo&
QtNode::getParseInfo()
{
    return parseInfo;
}


inline void
QtNode::setParseInfo( const ParseInfo &info )
{
    parseInfo = info;
}



inline void
QtTypeElement::setName( const char* newName )
{
    if( name ) free( name );
    name = strdup( newName );
}




inline QtDataType
QtTypeElement::getDataType() const
{
    return dataType;
}



inline const Type*
QtTypeElement::getType() const
{
    return type;
}


inline const char*
QtTypeElement::getName() const
{
    return name;
}


inline bool
QtTypeElement::isBaseType() const
{
    return dataType == QT_BOOL         || dataType == QT_COMPLEX ||
           dataType == QT_CHAR         || dataType == QT_OCTET   ||
           dataType == QT_USHORT       || dataType == QT_SHORT   ||
           dataType == QT_ULONG        || dataType == QT_LONG    ||
           dataType == QT_FLOAT        || dataType == QT_DOUBLE  ||
           dataType == QT_COMPLEXTYPE1 || dataType == QT_COMPLEXTYPE2;
}



inline bool
QtTypeElement::isInteger() const
{
    return dataType == QT_CHAR    || dataType == QT_OCTET   ||
           dataType == QT_USHORT  || dataType == QT_SHORT   ||
           dataType == QT_ULONG   || dataType == QT_LONG;
}


