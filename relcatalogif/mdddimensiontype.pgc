#include "mymalloc/mymalloc.h"
// This is -*- C++ -*-

/*
* This file is part of rasdaman community.
*
* Rasdaman community is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Rasdaman community is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
*
* Copyright 2003, 2004, 2005, 2006, 2007, 2008, 2009 Peter Baumann /
rasdaman GmbH.
*
* For more information please see <http://www.rasdaman.org>
* or contact Peter Baumann via <baumann@rasdaman.com>.
*/
/*************************************************************************
 *
 *
 * PURPOSE:
 *      Code with embedded SQL for PostgreSQL DBMS
 *
 *
 * COMMENTS:
 *      none
 *
 ***********************************************************************/


// general embedded SQL related definitions
EXEC SQL include "../reladminif/sqlglobals.h";

#include "config.h"
#include "mdddimensiontype.hh"
#include "reladminif/objectbroker.hh"
#include "reladminif/sqlerror.hh"
#include <logging.hh>

void
MDDDimensionType::insertInDb()
{
    EXEC SQL BEGIN DECLARE SECTION;
        long      mddtypeid;
        short     dimension;
        long long mddbasetypeid;
        char      mddtypename[STRING_MAXLEN];
    EXEC SQL END DECLARE SECTION;

    dimension = myDimension;
    mddtypeid = myOId.getCounter();
    (void) strncpy( mddtypename, const_cast<char*>(getName()), (size_t) sizeof(mddtypename) );
    DBObject* obj = (DBObject*)const_cast<BaseType*>(getBaseType());
    mddbasetypeid = obj->getOId();
    LTRACE << " typeid " << mddtypeid << " name " << mddtypename << " basetypeoid " << mddbasetypeid << "dimension " << dimension;

    EXEC SQL INSERT INTO RAS_MDDDIMTYPES (
        MDDDimTypeOId,
        MDDTypeName,
        BaseTypeId,
        Dimension
        )
       VALUES   (
        :mddtypeid,
        :mddtypename,
        :mddbasetypeid,
        :dimension
        );
    if (check("MDDDimensionType::insertInDb()\0"))
        generateException();
    DBObject::insertInDb();
}

void
MDDDimensionType::readFromDb()
{
#ifdef RMANBENCHMARK
    DBObject::readTimer.resume();
#endif
    EXEC SQL BEGIN DECLARE SECTION;
        long      mddtypeid1;
        char      mddtypename1[STRING_MAXLEN];
        long long mddbasetypeid1;
        short     dimension1;
    EXEC SQL END DECLARE SECTION;

    mddtypeid1 = myOId.getCounter();
    mddbasetypeid1 = 0;
    dimension1 = 0;

    EXEC SQL SELECT
        Dimension,
        BaseTypeId,
        MDDTypeName
       INTO
        :dimension1,
        :mddbasetypeid1,
        :mddtypename1
       FROM
        RAS_MDDDIMTYPES
       WHERE
        MDDDimTypeOId = :mddtypeid1;
    if (check("MDDDimensionType::MDDDimensionType() SELECT FROM RAS_MDDDIMTYPES\0") != 0)
    {
        if (SQLCODE == 100)
            throw r_Error(r_Error::r_Error_ObjectUnknown);
        else
            generateException();
    }
    myDimension = static_cast<r_Dimension>(dimension1);
    setName(mddtypename1);
    myBaseType = (BaseType*)ObjectBroker::getObjectByOId(OId(mddbasetypeid1));
#ifdef RMANBENCHMARK
    DBObject::readTimer.pause();
#endif
    LTRACE << "myBaseType at " << myBaseType;
    DBObject::readFromDb();
}

void
MDDDimensionType::deleteFromDb()
{
    EXEC SQL BEGIN DECLARE SECTION;
        long    mddtypeid3;
    EXEC SQL END DECLARE SECTION;

    mddtypeid3 = myOId.getCounter();

    EXEC SQL DELETE FROM
        RAS_MDDDIMTYPES
       WHERE
        MDDDimTypeOId = :mddtypeid3;
    if (check("MDDDimensionType::deleteFromDb()\0"))
        generateException();
    DBObject::deleteFromDb();
}

