/*
* This file is part of rasdaman community.
*
* Rasdaman community is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Rasdaman community is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
*
* Copyright 2003, 2004, 2005, 2006, 2007, 2008, 2009 Peter Baumann /
rasdaman GmbH.
*
* For more information please see <http://www.rasdaman.org>
* or contact Peter Baumann via <baumann@rasdaman.com>.
*/
/*************************************************************
 *
 *
 * PURPOSE:
 *
 *
 * COMMENTS:
 *
 ************************************************************/

#ifndef SRVRASMGR_HH
#define SRVRASMGR_HH

#define SERVER_DOWN        0
#define SERVER_AVAILABLE   1
// 2 is server crushed, but it's generated by rasmgr!
// regularly signal the rasmgr that we are available
#define SERVER_REGULARSIG  3

/**
  * \ingroup Rnprotocols
  */
class SrvRasmgrComm
{
public:
    SrvRasmgrComm();

    void init(unsigned int timeOut, const char* instanceName, const char* rasmgrHost, int rasmgrPort);

    void informRasmgrServerAvailable();
    void informRasmgrServerDown();
    void informRasmgrServerStillAvailable();

    unsigned int getTimeout();

private:
    void informRasMGR(int what);
    int  writeWholeMessage(int socket, char* destBuffer, int buffSize);

    const char* serverName;
    const char* rasmgrHost;
    int         rasmgrPort;
    unsigned int timeout;
};

extern SrvRasmgrComm rasmgrComm;

#endif
